git-hook(1)
===========

NAME
----
git-hook - Manage configured hooks

SYNOPSIS
--------
[verse]
'git hook' list <hook-name>

DESCRIPTION
-----------
You can list configured hooks with this command. Later, you will be able to run,
add, and modify hooks with this command.

This command parses the default configuration files for sections `hook` and
`hookcmd`. `hook` is used to describe the commands which will be run during a
particular hook event; commands are run in the order Git encounters them during
the configuration parse (see linkgit:git-config[1]). `hookcmd` is used to
describe attributes of a specific command. If additional attributes don't need
to be specified, a command to run can be specified directly in the `hook`
section; if a `hookcmd` by that name isn't found, Git will attempt to run the
provided value directly. For example:

Global config
----
  [hook "post-commit"]
    command = "linter"
    command = "~/typocheck.sh"

  [hookcmd "linter"]
    command = "/bin/linter --c"
----

Local config
----
  [hook "prepare-commit-msg"]
    command = "linter"
  [hook "post-commit"]
    command = "python ~/run-test-suite.py"
----

With these configs, you'd then see:

----
$ git hook list "post-commit"
global: /bin/linter --c
global: ~/typocheck.sh
local: python ~/run-test-suite.py

$ git hook list "prepare-commit-msg"
local: /bin/linter --c
----

If there is a command you wish to run in most cases but have one or two
exceptional repos where it should be skipped, you can use specify
`hookcmd.<name>.skip`, for example:

System config
----
  [hook "pre-commit"]
    command = check-for-secrets

  [hookcmd "check-for-secrets"]
    command = /bin/secret-checker --aggressive
----

Local config
----
  [hookcmd "check-for-secrets"]
    skip = true
  # This works for inlined hook commands, too:
  [hookcmd "~/typocheck.sh"]
    skip = true
----

After these configs are added, the hook list becomes:

----
$ git hook list "post-commit"
global: /bin/linter --c
local: python ~/run-test-suite.py

$ git hook list "pre-commit"
no commands configured for hook 'pre-commit'
----

COMMANDS
--------

list `<hook-name>`::

List the hooks which have been configured for `<hook-name>`. Hooks appear
in the order they should be run, and print the config scope where the relevant
`hook.<hook-name>.command` was specified, not the `hookcmd` (if applicable).
This output is human-readable and the format is subject to change over time.

CONFIGURATION
-------------
include::config/hook.txt[]

GIT
---
Part of the linkgit:git[1] suite
